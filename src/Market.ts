import BigNumber from 'bignumber.js';
import Web3 from 'web3';

// Types
import { Provider } from '@0xproject/types';
import { ECSignature, Order, SignedOrder } from './types/Order';

import { assert } from './assert';
import { createOrderHashAsync, signOrderHashAsync, tradeOrderAsync } from './lib/Order';

/**
 * The `Market` class is the single entry-point into the MARKET.js library.
 * It contains all of the library's functionality and all calls to the library
 * should be made through a `Market` instance.
 */
export class Market {
  private _web3: Web3;

  /**
   * Instantiates a new Market instance that provides the public interface to the Market library.
   * @param   provider    The Provider instance you would like the Market library to use
   *                      for interacting with the Ethereum network.
   * @return  An instance of the Market class.
   */
  constructor(provider: Provider) {
    assert.isWeb3Provider('provider', provider);
    this._web3 = new Web3();
    this._web3.setProvider(provider);
  }

  /**
   * Sets a new web3 provider for MARKET.js. Updating the provider will stop all
   * subscriptions so you will need to re-subscribe to all events relevant to your app after this call.
   * @param   provider    The Web3Provider you would like the MARKET.js library to use from now on.
   */
  public setProvider(provider: Provider): void {
    this._web3.setProvider(provider);
  }

  /**
   * Get the provider instance currently used by MARKET.js
   * @return  Web3 provider instance
   */
  public getProvider(): Provider {
    return this._web3.currentProvider;
  }

  /**
   * Computes the orderHash for a supplied order.
   * @param   order             An object that conforms to the Order or SignedOrder interface definitions.
   * @param   orderLibAddress   Address of the deployed OrderLib.
   * @return  The resulting orderHash from hashing the supplied order.
   */
  public async createOrderHashAsync(
    order: Order | SignedOrder,
    orderLibAddress: string
  ): Promise<string | BigNumber> {
    return createOrderHashAsync(this._web3.currentProvider, orderLibAddress, order);
  }

  /**
   * Signs an orderHash and returns it's elliptic curve signature.
   * @param   orderHash       Hex encoded orderHash to sign.
   * @param   signerAddress   The hex encoded Ethereum address you wish to sign it with. This address
   *          must be available via the Provider supplied to MARKET.js.
   * @return  An object containing the Elliptic curve signature parameters generated by signing the orderHash.
   */
  public async signOrderHashAsync(orderHash: string, signerAddress: string): Promise<ECSignature> {
    return signOrderHashAsync(this._web3.currentProvider, orderHash, signerAddress);
  }

  /**
   * Trades an order and returns success or error.
   * @param   signedOrder     An object that conforms to the SignedOrder interface. The
   *                          signedOrder you wish to validate.
   * @param   fillQty         The amount of the order that you wish to fill.
   * @return  A boolean indicating whether the order has been successfully traded or not.
   */
  public async tradeOrderAsync(signedOrder: SignedOrder, fillQty: number): Promise<boolean> {
    return tradeOrderAsync(this._web3.currentProvider, signedOrder, fillQty);
  }
}
